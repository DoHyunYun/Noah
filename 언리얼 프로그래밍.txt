*Visual Studio에서의 solution Configuration드롭다운은 Debug, Development, DebugGame이
있는데 가장 큰 차이점은 런타임 속도와 디버깅 능력의 사이에서 골라야 한다는 것이다.
Development는 가장 최적화되어 있지만 가장 디버깅 능력이 떨어지고 Debug는 가장 최적화가
안되어있지만 디버깅은 쉽게된다. 게임코드에 시간을 많이 쓰고 엔진에는 별로 시간을 할애하지
않는다면 DevugGame을 쓰는 것이 유용하다. 엔진 모듈을 최적화시키면서도 게임 모듈은 디버그
모드에 있기 때문이다.

*모든 경우 C 스타일 NULL 매크로 대신 nullptr 을 사용해야 합니다.

UCLASS() - 클래스(객체)
UCLASS() 매크로는 클래스에 여러가지 속성들을 추가할 수 있게 해준다. 또한 언리얼 엔진이
이를 인식할 수 있게 해줘 쓰레기 수집이나, 에디터 열기 등을 수행할 수 있다.

UPROPERTY() - 속성
EditAnywhere - 에디터내에 활성화 할지 설정하고 싶다면 
BlueprintReadWrite - 블루프린트 내에서 수정을 하고 싶다면 
디테일 패널에 카테고리를 만들려면 Category = 카테고리이름
VisivleDefualtsOnly, BlueprintReadOnly - 지정자 수정을 하거나 읽기/쓰기를 할 수 없게 하려면 
Bisible이나 read 키워드를 사용하면 컴포넌트를 볼 수 있게 만들어준다.

UFUNCTION() - 함수
BlueprintNativeEvent - 블루프린트에서 함수를 오버라이드 할 수 있게 하려면
BlueprintCallable - 블루프린트에서 사용할 것이라면
BlueprintImplementableEvent - 이 함수는 블루프린트 또는 레벨 블루프린트 그래프에서 덮어쓰기 가능하다.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
버전이 올라가서 필요할 것 같아 답글 달아보려고요.
그냥 다시 복습하는겸 하나씩 수정해서 답글 달려고 하는데 원본분이 괜찮으신지 모르겠네요.ㅜ.ㅜ
올려보고 삭제되어야 할거같으면 지워주세요.,


// 헤더 부분
UCLASS()
class "프로젝트명_API" AMyBasicPlayerController : public APlayerController
{
 GENERATED_UCLASS_BODY()
 virtual void BeginPlay() OVERRIDE;

// 이렇게 변경되었습니다.
GENERATED_BODY()
virtual void BeginPlay() override;
 
};

// 소스 부분
void AMyBasicPlayerController ::BeginPlay()
{
 Super::BeginPlay();
 GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Blue, TEXT("PlayerController BeginPlay - Screen"));
 UE_LOG(LogClass, Log, TEXT("PlayerController BeginPlay - Output"));
}



혹시 생성된 컨트롤러 설정이 안될경우에는 GameMode생성자 부분에서

// 헤더 부분
UCLASS()
class PROJECT_API AProjectGameMode : public AGameMode
{
 GENERATED_BODY()   
public:
 AProjectGameMode (const FObjectInitializer& ObjectInitializer);
};

// 소스 부분
AProjectGameMode ::AProjectGameMode (const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
{
 PlayerControllerClass = AMyBasicPlayerController::StaticClass();
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*BeginPlay()는 이 엑터가 레벨에 정상적으로 스폰되었을 경우 호출된다.(엑터의 '진입점'과 같은 역할)
*GEngine->AddOnScreenDebugMessage()는 게임 뷰포트에 문자열을 출력.
*UE_LOG 매크로는 에디터의 출력로그와 로그파일에 문자열을 쓴다.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
카메라 시점 제어
AMyBasicPlayerController::AMyBasicPlayerController(const class FPostConstructInitializeProperties& PCIP)
 : Super(PCIP)
{
 PlayerCameraManagerClass = AMyCamera::StaticClass();
}

UCLASS()
class AMyCamera : public APlayerCamera
{
 GENERATED_UCLASS_BODY()
 virtual void UpdateCamera(float pDelta) OVERRIDE;
 
};

소스에서는 다음과 같이 구현합니다.
void AMyCamera::UpdateCamera(float pDelta)
{
 Super::UpdateCamera(pDelta);
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
환경설정 파일에서 어떤 변수를 읽어들일지 지정하기 위해서는, 해당 변수가 들어있는 클래스의 UCLASS 매크로에 Config 지정자를
먼저 붙여야 합니다
클래스에 Config 지정자를 붙이는 것은 그저 그 클래스가 환경설정 파일에서 읽어들일 변수가 있고, 어느 파일에서 환경설정을 읽어
들일지를 나타낼 뿐입니다. 환경설정 파일에서 읽어들이고 저장할 변수를 지정하기 위해서는,UPROPERTY() 매크로에도 Config 지정
자를 붙여줘야 합니다.
UCLASS(Config=Game)
class AExampleClass : public AActor
UCLASS(Config=Game)
class AExampleClass : public AActor
{
GENERATED_UCLASS_BODY()
UPROPERTY(Config)
float ExampleVariable;
};

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
.H
UPROPERTY() UMyObjectClass* MyGCProtectedObj;
.CPP
MyGCProtectedObj = NewObject<UMyObjectClass>(this);
if(!MyObject) return;
if(!MyObject->IsValidLowLevel()) return;

MyObject->MarkPendingKill();
MyObject = nullptr;

if(!TheCharacter) return;
if(!TheCharacter->IsValidLowLevel()) return;
TheCharacter->Destroy();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C++코드에서 블루프린트 불러오고 싶은 경우.
DefaultPawn에 등록하고 싶을 경우
static ConstructorHelpers::FClassFinder<APawn>
IPlayer(TEXT("Blueprint'/Blueprints/Charcter/CharcterBP.CharcterBP_C'"));
if( IPlayer.Succeeded() )
{
 DefaultPawnClass = IPlayer.Class;
} 

SpawnActor로 생성하고 싶을 경우
UBlueprintGeneratedClass * BPGC = LoadObject<UBlueprintGeneratedClass>(nullptr, TEXT("/Game/TestBP.TestBP_C"));

    -> 액터인 경우에는 SpawnActor
          AActor * BPActor = GetWorld()->SpawnActor<AActor>(BPGC, SpawnTransform, SpawnParameters);

저는 이렇게 사용했었습니다.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
(C++코드 지우는법)
아래 link 참고해 주시고요.^^

http://cafe.naver.com/igc123/236
http://cafe.daum.net/igc123/K3VE/179

요컨데,
class를 지울 때는, 
visual studio에서 지우고!!!!!! windows 탐색기에서도 지우면!!!!
(그리고, 파생 class와 관련 blue print class도 다 지우면!!!!)
문제가 발생하지 않습니다.


P.S.
class viewer에 '추가 기능'이 있다면, 
상식적으로!!!!! '삭제 기능'도 있는 게 맞다고 봅니다.
cafe manager님이 이 글 보시면, 
unreal editor의 class viewer에 class 삭제 기능 제대로 만들어서 넣으라고 
요청해 주셨으면 합니다.

///////////////////////////////////////////////////////////
데이터테이블
static ConstructorHelpers::FObjectFinder<UDataTable> 
GameObjectLookupDataTable_BP(TEXT("DataTable'/Game/Data/GameObjectLookup.GameObjectLookup'"));
GameObjectLookupTable = GameObjectLookupDataTable_BP.Object;

/////////////////////////////////////////////////////////////////
cast 방법
if (AMatch3GameMode* GameMode = Cast<AMatch3GameMode>(UGameplayStatics::GetGameMode(this)))
///////////////////////////////////////////////////////////////////////
PlayerController얻는 방법
if (APlayerController* PC = UMatch3BlueprintFunctionLibrary::GetLocalPlayerController(this))
////////////////////////////////////////////////////////////////////////////
Enum사용 방법 & Map 사용 방법
UENUM(BlueprintType)
enum class EMiniatureActionPatten : uint8
{
	E_Stay			UMETA(DisplayName = "Stay"),
	E_MovePoint 	UMETA(DisplayName = "MovePoint"),
	E_Walkout		UMETA(DisplayName = "Walkout"),
};


TMap<EMiniatureActionPatten, UActionPatten*> PattenMap;
////////////////////////////////////////////////////////////////////////////
AI컨트롤러 불러오기
AAIController* AIC = Cast<AAIController>(GetController());
////////////////////////////////////////////////////////////////////////////
APawn* DummyPawn = UGameplayStatics::GetPlayerPawn(GetWorld(), 0);
	if (DummyPawn != nullptr) {
		PlayerPawn = Cast<AROKPlayerPawn>(PlayerPawn);
	}

TArray<AActor*> DeletePattern;
UGameplayStatics::GetAllActorsOfClass(GetWorld(), APattern::StaticClass(), DeletePattern);

고칠 부분...
분기(if)가 될 경우의 실행핀을 ture로 통일...

/////////////////////////////////////////////////////////
파티클 불러오는 법
static ConstructorHelpers::FObjectFinder<UParticleSystem> PSC(TEXT("ParticleSystem'/Game/PFX_PlayerTrail.PFX_PlayerTrail'"));
	if (PSC.Succeeded()) {
		ParticleComponent->SetTemplate(PSC.Object);
	}

///////////////////
Component에 AttachTo() 함수로 상위 컴포넌트를 연결시켜 줘야한다.
////////////////////////
for(TActorIterator<AMyActor> itr(GetWorld()); itr; ++itr)
{
	if(itr){itr->FOO();}
}
